// <auto-generated />
using System;
using Calendario.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Calendario.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210506113851_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Calendario.Core.Base.Entity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("Calendario.Core.Date", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("IsExcept")
                        .HasColumnType("boolean");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.HasKey("EventId", "Type", "Id");

                    b.ToTable("EventDates");

                    b.HasDiscriminator<string>("Type").HasValue("Date");
                });

            modelBuilder.Entity("Calendario.Core.Relation", b =>
                {
                    b.Property<string>("ObjectId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.HasKey("ObjectId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Calendario.Core.Base.Object", b =>
                {
                    b.HasBaseType("Calendario.Core.Base.Entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("Calendario.Core.Base.Subject", b =>
                {
                    b.HasBaseType("Calendario.Core.Base.Entity");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Calendario.Core.Dates.ContinuousDate", b =>
                {
                    b.HasBaseType("Calendario.Core.Date");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasDiscriminator().HasValue("ContinuousDate");
                });

            modelBuilder.Entity("Calendario.Core.Dates.ContinuousReccurenceDate", b =>
                {
                    b.HasBaseType("Calendario.Core.Date");

                    b.Property<string>("RRule")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ContinuousReccurenceDate_Start");

                    b.HasDiscriminator().HasValue("ContinuousReccurenceDate");
                });

            modelBuilder.Entity("Calendario.Core.Dates.ReccurenceDate", b =>
                {
                    b.HasBaseType("Calendario.Core.Date");

                    b.Property<string>("RRule")
                        .HasColumnType("text")
                        .HasColumnName("ReccurenceDate_RRule");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ReccurenceDate_Start");

                    b.HasDiscriminator().HasValue("ReccurenceDate");
                });

            modelBuilder.Entity("Calendario.Core.Dates.SimpleDate", b =>
                {
                    b.HasBaseType("Calendario.Core.Date");

                    b.Property<int?>("Belonging")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Value")
                        .HasColumnType("timestamp without time zone");

                    b.HasDiscriminator().HasValue("SimpleDate");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Calendar", b =>
                {
                    b.HasBaseType("Calendario.Core.Base.Object");

                    b.Property<string>("TypeId")
                        .HasColumnType("text");

                    b.HasIndex("TypeId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Event", b =>
                {
                    b.HasBaseType("Calendario.Core.Base.Object");

                    b.Property<string>("CalendarId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasIndex("CalendarId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Type", b =>
                {
                    b.HasBaseType("Calendario.Core.Base.Object");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Calendario.Core.Subjects.Group", b =>
                {
                    b.HasBaseType("Calendario.Core.Base.Subject");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.HasIndex("ParentId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Calendario.Core.Subjects.User", b =>
                {
                    b.HasBaseType("Calendario.Core.Base.Subject");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasIndex("GroupId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Calendario.Core.Date", b =>
                {
                    b.HasOne("Calendario.Core.Objects.Event", null)
                        .WithMany("Dates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendario.Core.Relation", b =>
                {
                    b.HasOne("Calendario.Core.Base.Object", "Object")
                        .WithMany("Relations")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendario.Core.Base.Subject", "Subject")
                        .WithMany("Relations")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Calendario.Core.AccessPermissions", "AccessRules", b1 =>
                        {
                            b1.Property<string>("RelationObjectId")
                                .HasColumnType("text");

                            b1.Property<string>("RelationSubjectId")
                                .HasColumnType("text");

                            b1.Property<bool>("CanCreateDependents")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanDelete")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanRead")
                                .HasColumnType("boolean");

                            b1.Property<bool>("CanUpdate")
                                .HasColumnType("boolean");

                            b1.HasKey("RelationObjectId", "RelationSubjectId");

                            b1.ToTable("Relations");

                            b1.WithOwner()
                                .HasForeignKey("RelationObjectId", "RelationSubjectId");
                        });

                    b.Navigation("AccessRules");

                    b.Navigation("Object");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Calendario.Core.Base.Object", b =>
                {
                    b.HasOne("Calendario.Core.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Calendario.Core.Base.Object", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendario.Core.Base.Subject", b =>
                {
                    b.HasOne("Calendario.Core.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Calendario.Core.Base.Subject", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendario.Core.Objects.Calendar", b =>
                {
                    b.HasOne("Calendario.Core.Base.Object", null)
                        .WithOne()
                        .HasForeignKey("Calendario.Core.Objects.Calendar", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendario.Core.Objects.Type", "Type")
                        .WithMany("Calendars")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Event", b =>
                {
                    b.HasOne("Calendario.Core.Objects.Calendar", "Calendar")
                        .WithMany("Events")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Calendario.Core.Base.Object", null)
                        .WithOne()
                        .HasForeignKey("Calendario.Core.Objects.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Type", b =>
                {
                    b.HasOne("Calendario.Core.Base.Object", null)
                        .WithOne()
                        .HasForeignKey("Calendario.Core.Objects.Type", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendario.Core.Subjects.Group", b =>
                {
                    b.HasOne("Calendario.Core.Base.Subject", null)
                        .WithOne()
                        .HasForeignKey("Calendario.Core.Subjects.Group", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendario.Core.Subjects.Group", "Parent")
                        .WithMany("Groups")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Calendario.Core.Subjects.User", b =>
                {
                    b.HasOne("Calendario.Core.Subjects.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendario.Core.Base.Subject", null)
                        .WithOne()
                        .HasForeignKey("Calendario.Core.Subjects.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Calendario.Core.Base.Object", b =>
                {
                    b.Navigation("Relations");
                });

            modelBuilder.Entity("Calendario.Core.Base.Subject", b =>
                {
                    b.Navigation("Relations");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Calendar", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Event", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Calendario.Core.Objects.Type", b =>
                {
                    b.Navigation("Calendars");
                });

            modelBuilder.Entity("Calendario.Core.Subjects.Group", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
